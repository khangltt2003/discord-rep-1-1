// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma generate
// npx prisma db push
// url = mysql://[user]:[password]@[host]:[post]/[database]?sslaccept=required

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile{
  id String @id @default(uuid())
  userID String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text
  
  wallpaper String @db.VarChar(255) @default("bg-red-500")

  servers Server[]
  members Member[]

  conversationCreated Conversation[] @relation("memberOne")
  conversationJoined Conversation[] @relation("memberTwo")

  conversationMessages ConversationMessage []


  channels Channel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())
  name String 
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields :[profileId], references: [id], onDelete:  Cascade)

  members Member[]
  channels Channel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}


enum MemberRole {
  ADMIN 
  MODERATOR 
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([profileId])
}

enum MessageType {
  TEXT
  IMAGE
  PDF
}

model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text
  type MessageType @default(TEXT)

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)


  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Profile @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Profile @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  messages ConversationMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberOneId])
  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])
}

model ConversationMessage {
  id String @id @default(uuid())

  content String @db.Text
  fileUrl String? @db.Text


  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete:  Cascade)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([profileId])
}